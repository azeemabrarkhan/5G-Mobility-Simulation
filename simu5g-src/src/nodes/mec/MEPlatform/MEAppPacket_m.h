//
// Generated file, do not edit! Created by nedtool 5.6 from nodes/mec/MEPlatform/MEAppPacket.msg.
//

#ifndef __MEAPPPACKET_M_H
#define __MEAPPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class MEAppPacket;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>nodes/mec/MEPlatform/MEAppPacket.msg:15</tt> by nedtool.
 * <pre>
 * class MEAppPacket extends inet::FieldsChunk
 * {
 *     unsigned int sno;
 *     simtime_t timestamp;
 * 
 *     //type of message
 *     string type;
 * 
 *     //communication informations
 *     string sourceAddress;
 *     string destinationAddress;
 * 
 *     //instantiation informations
 *     string MEModuleType;			//path where to find the cModule of the MEApp to instantiate
 *     string MEModuleName;			//module class name of the MEApp to instantiate
 * 
 *     //identification information
 *     int ueAppID;
 * 
 *     //resources required
 *     unsigned int requiredDisk;
 *     unsigned int requiredRam;
 *     double requiredCpu;
 * 
 *     //service required
 *     string requiredService;
 * }
 * </pre>
 */
class MEAppPacket : public ::inet::FieldsChunk
{
  protected:
    unsigned int sno = 0;
    omnetpp::simtime_t timestamp = SIMTIME_ZERO;
    omnetpp::opp_string type;
    omnetpp::opp_string sourceAddress;
    omnetpp::opp_string destinationAddress;
    omnetpp::opp_string MEModuleType;
    omnetpp::opp_string MEModuleName;
    int ueAppID = 0;
    unsigned int requiredDisk = 0;
    unsigned int requiredRam = 0;
    double requiredCpu = 0;
    omnetpp::opp_string requiredService;

  private:
    void copy(const MEAppPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MEAppPacket&);

  public:
    MEAppPacket();
    MEAppPacket(const MEAppPacket& other);
    virtual ~MEAppPacket();
    MEAppPacket& operator=(const MEAppPacket& other);
    virtual MEAppPacket *dup() const override {return new MEAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getSno() const;
    virtual void setSno(unsigned int sno);
    virtual omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(omnetpp::simtime_t timestamp);
    virtual const char * getType() const;
    virtual void setType(const char * type);
    virtual const char * getSourceAddress() const;
    virtual void setSourceAddress(const char * sourceAddress);
    virtual const char * getDestinationAddress() const;
    virtual void setDestinationAddress(const char * destinationAddress);
    virtual const char * getMEModuleType() const;
    virtual void setMEModuleType(const char * MEModuleType);
    virtual const char * getMEModuleName() const;
    virtual void setMEModuleName(const char * MEModuleName);
    virtual int getUeAppID() const;
    virtual void setUeAppID(int ueAppID);
    virtual unsigned int getRequiredDisk() const;
    virtual void setRequiredDisk(unsigned int requiredDisk);
    virtual unsigned int getRequiredRam() const;
    virtual void setRequiredRam(unsigned int requiredRam);
    virtual double getRequiredCpu() const;
    virtual void setRequiredCpu(double requiredCpu);
    virtual const char * getRequiredService() const;
    virtual void setRequiredService(const char * requiredService);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MEAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MEAppPacket& obj) {obj.parsimUnpack(b);}

#endif // ifndef __MEAPPPACKET_M_H

