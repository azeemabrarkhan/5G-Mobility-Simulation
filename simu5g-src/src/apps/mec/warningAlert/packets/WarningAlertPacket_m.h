//
// Generated file, do not edit! Created by nedtool 5.6 from apps/mec/warningAlert/packets/WarningAlertPacket.msg.
//

#ifndef __WARNINGALERTPACKET_M_H
#define __WARNINGALERTPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class WarningAlertPacket;
#include "nodes/mec/MEPlatform/MEAppPacket_m.h" // import nodes.mec.MEPlatform.MEAppPacket

/**
 * Class generated from <tt>apps/mec/warningAlert/packets/WarningAlertPacket.msg:20</tt> by nedtool.
 * <pre>
 * class WarningAlertPacket extends MEAppPacket
 * {
 *     //meaningfull for INFO_UEAPP type  -> used by the MEWarningAlertService
 *     int ueOmnetID;
 *     double positionX;
 *     double positionY;
 *     double positionZ;
 * 
 *     //meaningfull for INFO_MEAPP type -> used by the UEWarningAlertApp to change its color
 *     bool danger;
 * }
 * </pre>
 */
class WarningAlertPacket : public ::MEAppPacket
{
  protected:
    int ueOmnetID = 0;
    double positionX = 0;
    double positionY = 0;
    double positionZ = 0;
    bool danger = false;

  private:
    void copy(const WarningAlertPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WarningAlertPacket&);

  public:
    WarningAlertPacket();
    WarningAlertPacket(const WarningAlertPacket& other);
    virtual ~WarningAlertPacket();
    WarningAlertPacket& operator=(const WarningAlertPacket& other);
    virtual WarningAlertPacket *dup() const override {return new WarningAlertPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getUeOmnetID() const;
    virtual void setUeOmnetID(int ueOmnetID);
    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);
    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);
    virtual double getPositionZ() const;
    virtual void setPositionZ(double positionZ);
    virtual bool getDanger() const;
    virtual void setDanger(bool danger);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WarningAlertPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WarningAlertPacket& obj) {obj.parsimUnpack(b);}

#endif // ifndef __WARNINGALERTPACKET_M_H

